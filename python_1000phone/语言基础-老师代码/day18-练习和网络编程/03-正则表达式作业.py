"""__author__=余婷"""
import re

# 1.写一个正则表达式判断一个字符串是否是ip地址
# 规则：一个ip地址由4个数字组成，每个数字之间用.连接。每个数字的大小是0-255
# 255.189.10.37   正确
# 256.189.89.9    错误
"""
匹配0-255的正则: \d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5]
0-9:  \d
10-99: [1-9]\d
100-199: 1\d{2}
200-249: 2[0-4]\d
250-255: 25[0-5]

"""
re_str = r'((\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])'
print(re.fullmatch(re_str, '255.189.10.37'))
print(re.fullmatch(re_str, '256.189.89.9'))

# 2.写一个正则表达式可以匹配任意有效数字
# 123   正确；  23.34  正确；     -123  正确；  +12.34  正确； 0.232  正确； -0.233  正确
# 0123  错误； 012.23  错误；   00.23 错误
"""
整数: r'[+-]?[1-9]\d*'
浮点数: r'[+-]?[1-9]\d*\.\d+'  - x.x
       r'[+-]?0\.\d+'         - 0.x
"""
re_str = r'([+-]?([1-9]\d*\.\d+|0\.\d+|[1-9]\d*))|0'
print(re.fullmatch(re_str, '0'))

# 3.验证输入的内容只能是汉字
re_str = r'[\u4e00-\u9fa5]+'
print(re.fullmatch(re_str, '卡士大夫'))

# 4.电话号码的验证
re_str = r'1[3-9]\d{9}'

# 5.验证输入用户名和QQ号是否有效并给出对应的提示信息
# 要求：
# 用户名必须由字母、数字或下划线构成且长度在6~20个字符之间
# QQ号是5~12的数字且首位不能为0

re_str1 = r'[\da-zA-Z_]{6,20}'
if re.fullmatch(re_str1, 'shdfu23'):
    print('用户名合法')
else:
    print('用户名不合法')

re_str2 = r'[1-9]\d{4,11}'
if re.fullmatch(re_str2, '765448377'):
    print('QQ号合法')
else:
    print('QQ号不合法')


# 6.验证是否是有效标识符: 由字母、数字、_组成并且数字不能开头
re_str = r'[a-zA-Z_][a-zA-Z\d_]*'
print(re.fullmatch(re_str, 'hu8_'))

