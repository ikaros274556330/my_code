"""__author__=余婷"""

# 计算机底层存储数据只能存数字，并且存的是数字的补码

# 计算机内存大小(最小单位是位)
# 在程序中，使用内存的时候的最小单位是字节
"""
1bytes(字节) =  8bit(位)
1kb = 1024bytes
1Mb = 1024kb
1G = 1024M
1T = 1024G
"""

# 1.原码
# 原码 = 符号位+数字对应的二进制 (原码就是在数字的二进制的最前面加上符号位)
# 符号位上0表示正，1表示负
# 正数的原码、反码、补码是一样的，都是原码
"""
10(10) -> 1010(2)
10(10) -> 00001010(原码)
-10(10) -> 10001010
"""

# 2.反码
# 反码就是原码符号位不变，其他的位全部取反(0变1，1变0)
"""
-10 -> 10001010(原) -> 11110101(反)
"""

# 3.补码
# 补码就是反码加1
# 为什么计算机存负数的时候要存补码：计算机只有加法器，只能进行加运算。负数进行运算的时候用原码不能正确运算，只有补码才行
"""
-10 -> 10001010(原) -> 11110101(反) -> 11110110(补)

130的补码：0000000010000010(原/反/补)
-130的补码：1000000010000010(原) -> 11111111101111101(反) ->11111111101111110(补)


3+2 = 5
3的补码: 00000011
2的补码: 00000010
3 + 2 = 00000011 + 00000010 = 00000101 == 5

3-2 = 1
3的补码: 00000011(原/补)
-2的补码: 10000010(原) -> 11111101(反) -> 11111110(补)
原码计算: 00000011(原) + 10000010(原) = 10000101(原) == -5 (错误！)
补码计算: 00000011(补) + 11111110(补) = 00000001(补) == 1(对！)

-5-2 = -7
-5: 10000101(原) -> 11111010(反) -> 11111011(补)
-2: 10000010(原) -> 11111101(反) -> 11111110(补)
原码计算: 10000101+10000010 = 00000111(原) == 7
补码计算：11111011+11111110 = 11111001(补) -> 11111000(反) -> 10000111(原) = -7

-130 + 20
"""
print(3+2)
print(3-2)




